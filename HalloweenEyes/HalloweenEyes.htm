<!DOCTYPE html>
<html lang="en">
<head>
<title>You're being watched...</title>
<!-- 

This is a conversion of the Teensy 3.6 and OLED display software created for Adafruit by Phil Burgess.
Project: https://learn.adafruit.com/animated-electronic-eyes-using-teensy-3-1/overview


Credits...

Concept by David Boccabella (Marcwolf) on the Stan Winston School of Character Arts forums.
http://forums.stanwinstonschool.com/

Original written by Phil Burgess in Python and C / Paint Your Dragon for Adafruit Industries.

Neon glow:
    Felix Rilling
	https://codepen.io/FelixRilling/pen/qzfoc
	
NoSleep.js:
    Rich Tibbett
	git.io/vfn01
	MIT license
	
Queue:
    Stephen Morley
	http://code.stephenmorley.org/javascript/queues/
	CC0 1.0 Universal legal code:
	http://creativecommons.org/publicdomain/zero/1.0/legalcode
    
Fonts:
    Alphabet
	License https://developers.google.com/fonts/faq
	
This implementation:
    Sarah Cartwright (SarahC)
	MIT license.

-->
<link href='https://fonts.googleapis.com/css?family=Audiowide|Iceland|Monoton|Pacifico|Press+Start+2P|Vampiro+One' rel='stylesheet' type='text/css'>
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="NoSleep.min.js"></script>
<style>

body, html {
    height: 90%;
	width: 100%;
    background: black;
	color: white;
	font-family: arial;
	padding: 0px;
	margin: 0px;
}

.eyeCanvas {
	display: inline-block;
	width: 44%;
	height: 100%;
	float: left;
}

.nose {
	width: 12%;
	height: 50%;
	z-index: 1000;
	display: inline-block;
	float: left;
}

.leftEye {
	transform: scale(-1, 1);
	filter: FlipH;
}

#content {
    margin: 0px;
	padding: 0px;
	position: absolute;
}

div.stretchy-wrapper {
    position: relative;
	width: 100%;
	height: 100%;
}

.innerDisplay {
    position: absolute;
    top: 0; bottom: 0; left: 0; right: 0;
	white-space: nowrap;
}

p {
	text-align: center;
	font-size: 4em;
	opacity:1;
    transition: opacity 500ms;
	z-index: 1000;
}

.hideMessage {
    opacity:0;
}

.messageStyle {
	width: 100%;
	position: absolute;
	text-align: center;
	color: red;
    top: 0px;
	left: 0px;
	z-index: 1000px;
}

</style>
</head>
<body>
<p id="message" class="messageStyle">Click to start.</p>
<div id="content">
  <div class="stretchy-wrapper">
	<div class="innerDisplay">
		<canvas id="c1" class="eyeCanvas leftEye"></canvas>
		<div class="nose"></div>
		<canvas id="c2" class="eyeCanvas"></canvas>
	</div>
  </div>
</div>
<script>
//#####################################################
//
//    Pass in eyeType=  Dragon / Human / Goat / Vampire
//
// Example: http://untamed.zone/HalloweenEyes/HalloweenEyes.htm?eyeType=Dragon

//document.onclick = function () {};

var noSleep = new NoSleep();
var message = document.getElementById("message");
var debug = document.getElementById("debug");
var firmwareData = getFirmwareData();
var runtimeData = getRuntimeData();
var imageRoot = null;
var images = null;
createVariablesFromAddress();

document.addEventListener("click", enableNoSleep, false);
document.addEventListener("touchstart", enableNoSleep, false);

// Enable wake lock.
// (must be wrapped in a user input event handler e.g. a mouse or touch handler)
function enableNoSleep() {
  noSleep.enable();
  document.removeEventListener("click", enableNoSleep, false);
  document.removeEventListener("touchstart", enableNoSleep, false);
  message.innerHTML = "Click screen anytime for fullscreen.";
  setTimeout(function(){
	document.getElementById("message").className = "hideMessage";
	setTimeout(function(){
		document.getElementById("message").style.display = "none";
		clearCanvases();
		document.onclick = goFullscreen;
		document.addEventListener("click", goFullscreen, false);
		document.addEventListener("touchstart", goFullscreen, false);
		requestAnimationFrame(loop);
	}, 510);
  }, 2000);
}

function createVariablesFromAddress() {
  var addressVariables = window.location.search.substring(1);
  var items = addressVariables.split("&").map(
    function(innerItems) { 
      parts = innerItems.split("=");
      window[parts[0].trim()] = parts[1];
    }
  );
}

function resize(){
	var width = 0;
	var height = 0;
	var winWidth = window.innerWidth - 10;
	var winHeight = window.innerHeight;
	
	var imgWidth = 6400;
	var imgHeight = 2800;
	
	var conWidth = winWidth - (winWidth / 100 * 14);
	if(conWidth < 150) conWidth = 150;
	
	var conHeight = winHeight;
	if(conHeight < 70) conHeight = 70;
	
	conRatio = conWidth / conHeight;
	imgRatio = imgWidth / imgHeight;

	if(conRatio < imgRatio){
		width = conWidth;
		height = conWidth / imgRatio;
	} else {
		height = conHeight;
		width = conHeight * imgRatio;
	}
	if(width > imgWidth || height > imgHeight){
		width = imgWidth;
		height = imgHeight;
	}

	var top = (winHeight / 2) - (height / 2);
	var left = (winWidth / 2) - (width / 2);

	var cont = document.getElementById("content");
	cont.style.top = top + "px";
	cont.style.left = left + "px";
	cont.style.height = height + "px";
	cont.style.width = width + "px";
}
	
resize();
window.addEventListener("resize", resize);

function goFullscreen() {
  var doc = window.document;
  var docEl = doc.documentElement;

  var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
  var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;

  if(!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
    requestFullScreen.call(docEl);
  }
  else {
    cancelFullScreen.call(doc);
  }
}

if(eyeType.toLowerCase() == "dragon"){
  firmwareData.irisSize = 160; // Must match pupilMap.png dimensions for slit pupils!
  firmwareData.slitPupil = true;
  runtimeData.IRIS_MIN = 40;
  runtimeData.IRIS_MAX = 450;
  runtimeData.TRACKING = true;
  imageRoot = "http://untamed.zone/miscImages/TeensyEye/dragonEye/";
  images = ["iris.png", "lower.png", "sclera.png", "upper.png", "pupilMap.png"];
}

if(eyeType.toLowerCase() ==  "human"){
  firmwareData.irisSize = 80; // Matches up with sclera size.
  firmwareData.slitPupil = false;
  runtimeData.IRIS_MIN = 120;
  runtimeData.IRIS_MAX = 720;
  runtimeData.TRACKING = true;
  imageRoot = "http://untamed.zone/miscImages/TeensyEye/defaultEye/";
  images = ["iris.png", "lower.png", "sclera.png", "upper.png"];
}

if(eyeType.toLowerCase() == "goat"){
  firmwareData.irisSize = 128; // Must match pupilMap.png dimensions for slit pupils!
  firmwareData.slitPupil = true;
  runtimeData.IRIS_MIN = 120;
  runtimeData.IRIS_MAX = 720;
  runtimeData.TRACKING = true;
  imageRoot = "http://untamed.zone/miscImages/TeensyEye/goatEye/";
  images = ["iris.png", "lower.png", "sclera.png", "upper.png", "pupilMap.png"];
}
if(eyeType.toLowerCase() == "vampire"){
  firmwareData.irisSize = 110; // Any size you want.
  firmwareData.slitPupil = false;
  runtimeData.IRIS_MIN = 120;
  runtimeData.IRIS_MAX = 650;
  runtimeData.TRACKING = true;
  imageRoot = "http://untamed.zone/miscImages/TeensyEye/noScleraEye/";
  images = ["iris.png", "lower.png", "sclera.png", "upper.png"];
}

function getFirmwareData(){
  return {
    SCLERA_WIDTH: 0,
    SCLERA_HEIGHT: 0,
    sclera: null,

    IRIS_MAP_WIDTH: 0,
    IRIS_MAP_HEIGHT: 0,
    IRIS_WIDTH: 0,
    IRIS_HEIGHT: 0,
    iris: null,
    irisSize: 80,
    slitPupil: false,
    radius: 0,

    SCREEN_WIDTH: 0,
    SCREEN_HEIGHT: 0,
    upper: null,
    lower: null,

    polar: null
  };
}

(function() {
  var imageCount = images.length;
  var loadedCount = 0, errorCount = 0;
  var hardwareDisplays = [];

  function checkAllLoaded() {
    if (loadedCount + errorCount == imageCount ) {
      if(errorCount !=0){
        alert("Image loading error!");
      }else{
        startProcessingAfterImageLoad(hardwareDisplays);
      }
    }
  }

  function onload(info) {
    console.log("Loaded: " + info.target.src);

    var c = document.createElement("canvas");
    var ctx = c.getContext('2d');
    c.width = this.width;
    c.height = this.height;
    ctx.fillStyle = 'rgb(0, 0, 0)';
    ctx.fillRect(0, 0, this.width, this.height);
    ctx.drawImage(this, 0, 0);
    hardwareDisplays[info.target.fileName] = {
      canvas: c,
      ctx: ctx, 
      imageData: ctx.getImageData(0, 0, c.width, c.height),
      imageDataData: ctx.getImageData(0, 0, c.width, c.height).data
    };
    loadedCount++;
    checkAllLoaded();
  }

  function onerror(info) {
    console.log("Failed to load: " + info.target.src);
    errorCount++;
    checkAllLoaded();
  }

  for(var i = 0; i < imageCount; i++) {
    var img = new Image();
    img.onload = onload; 
    img.onerror = onerror;
    img.fileName = images[i];
    img.crossOrigin = "Anonymous";
    img.src = imageRoot + images[i];
  }
})();

function newArray(x, y){
  //return Array(x).fill(0).map(() => Array(y).fill(0)); // Causes problems on some devices.
	var f = new Array();
	for (i = 0; i < x; i++) {
		f[i] = new Array();
		for (j = 0; j < y; j++) {
			f[i][j]=0;
		}
	}
	return f;
}

function startProcessingAfterImageLoad(hardwareDisplays){
  getImagesTables(hardwareDisplays, firmwareData);
}

function getImagesTables(hardwareDisplays, firmwareData){
  firmwareData.SCLERA_WIDTH = hardwareDisplays["sclera.png"].canvas.width;
  firmwareData.SCLERA_HEIGHT = hardwareDisplays["sclera.png"].canvas.height;
  var imageData = hardwareDisplays["sclera.png"].imageDataData;
  firmwareData.sclera = newArray(firmwareData.SCLERA_WIDTH, firmwareData.SCLERA_HEIGHT);
  for(var y = 0; y < firmwareData.SCLERA_HEIGHT; y++){
    for(var x = 0; x < firmwareData.SCLERA_WIDTH; x++){
      var ptr = ((y * firmwareData.SCLERA_WIDTH) + x) * 4;
      var r = (imageData[ptr] & 248) << 8;
      var g = (imageData[ptr + 1] & 252) << 3;
      var b = (imageData[ptr + 2] & 255) >> 3;
      firmwareData.sclera[x][y] = r | g | b;
    }
  }
  console.log("Sclera done!");
  if(hardwareDisplays["iris.png"].canvas.width > 512 || hardwareDisplays["iris.png"].canvas.height > 128){
    alert("Can't continue! Iris image can't exceed 512 pixels wide or 128 pixels tall.");
    console.log("Can't continue! Iris image can't exceed 512 pixels wide or 128 pixels tall.");
  }
  firmwareData.IRIS_MAP_WIDTH = hardwareDisplays["iris.png"].canvas.width;
  firmwareData.IRIS_MAP_HEIGHT = hardwareDisplays["iris.png"].canvas.height;
  imageData = hardwareDisplays["iris.png"].imageDataData;
  firmwareData.iris = newArray(firmwareData.IRIS_MAP_WIDTH, firmwareData.IRIS_MAP_HEIGHT);
  for(var y = 0; y < firmwareData.IRIS_MAP_HEIGHT; y++){
    for(var x = 0; x < firmwareData.IRIS_MAP_WIDTH; x++){
      var ptr = ((y * firmwareData.IRIS_MAP_WIDTH) + x) * 4;
      var r = (imageData[ptr] & 248) << 8;
      var g = (imageData[ptr + 1] & 252) << 3;
      var b = (imageData[ptr + 2] & 255) >> 3;
      firmwareData.iris[x][y] = r | g | b;
    }
  }
  console.log("Iris done!");
  firmwareData.SCREEN_WIDTH = hardwareDisplays["upper.png"].canvas.width;
  firmwareData.SCREEN_HEIGHT = hardwareDisplays["upper.png"].canvas.height;
  upperImageData = hardwareDisplays["upper.png"].imageDataData;
  lowerImageData = hardwareDisplays["lower.png"].imageDataData;
  firmwareData.upper = newArray(firmwareData.SCREEN_WIDTH, firmwareData.SCREEN_HEIGHT);
  firmwareData.lower = newArray(firmwareData.SCREEN_WIDTH, firmwareData.SCREEN_HEIGHT);
  for(var y = 0; y < firmwareData.SCREEN_HEIGHT; y++){
    for(var x = 0; x < firmwareData.SCREEN_WIDTH; x++){
      var ptr = ((y * firmwareData.SCREEN_WIDTH) + x) * 4;
      firmwareData.upper[x][y] = upperImageData[ptr] & 255;
      firmwareData.lower[x][y] = lowerImageData[ptr] & 255;
    }
  }
  console.log("Upper/Lower done!");

  if(firmwareData.irisSize % 2 != 0){
    alert("Iris diameter must be even value.");
  }
  if(firmwareData.irisSize < 0){
    firmwareData.irisSize = -firmwareData.irisSize;
    firmwareData.slitPupil = true;
    if (hardwareDisplays["pupilMap.png"].canvas.width != firmwareData.irisSize || hardwareDisplays["pupilMap.png"].canvas.height != firmwareData.irisSize){
      alert("Image size must match iris size.");
      console.log("Image size must match iris size.")
    }
  }
  radius = firmwareData.irisSize / 2;
  firmwareData.IRIS_WIDTH = firmwareData.irisSize;
  firmwareData.IRIS_HEIGHT = firmwareData.irisSize;
  firmwareData.polar = newArray(firmwareData.irisSize, firmwareData.irisSize);
  var angle = 0;
  for(var y = 0; y < firmwareData.irisSize; y++){
    var dy = y - radius + 0.5;
    for(var x = 0; x < firmwareData.irisSize; x++){
      var dx = x - radius + 0.5;
      var distance = Math.sqrt(dx * dx + dy * dy);
      if(distance >= radius) {
        firmwareData.polar[x][y] = 127;
      }else{
        if(firmwareData.slitPupil){
          angle = Math.atan2(dx, dy);
          angle += Math.PI;
          angle /= (Math.PI * 2.0);
          var ptr = ((x * hardwareDisplays["pupilMap.png"].canvas.width) + y) * 4;
          distance = hardwareDisplays["pupilMap.png"].imageDataData[ptr] / 255.0;
        }else{
          angle = Math.atan2(dx, dy);
          angle += Math.PI; 
          angle /= (Math.PI * 2.0);
          distance /= radius;
        }
        distance *= 128.0;
        if(distance > 127) distance = 127;
        var a = ~~(angle * 512.0);
        var d = 127 - (~~distance);
        firmwareData.polar[y][x] = ((a << 7) | d) & 65535;
      }
    }
  }
  console.log("Iris spherical mapping done!");
}

function getRuntimeData() {
  return {
    NUM_EYES: 0,
    TRACKING: true,
    IRIS_PIN_input: 135,
    IRIS_SMOOTH: true,
    IRIS_MIN: 120,
    IRIS_MAX: 720,
    WINK_L_PIN: 0,
    BLINK_PIN: 1,
    WINK_R_PIN: 2,
    AUTOBLINK: true,
    timeOfLastBlink: 0,
    timeToNextBlink: 0,
    NOBLINK: 0,
    ENBLINK: 1,
    DEBLINK: 2
  };
}

function eyeBlink() {
  this.pin = 0;
  this.state = runtimeData.NOBLINK;
  this.duration = 50;
  this.startTime = 0;
};

function eyeObj(data) {
  this.display = data;
  this.blink = new eyeBlink();
};

function coreCanvas(obj) {
  this.canvas = obj
  this.ctx = this.canvas.getContext("2d");
  this.canvas.width = 128;
  this.canvas.height = 128;
  this.imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
  this.imageDataData = this.imageData.data;
}

var eyeCanvases = document.getElementsByClassName("eyeCanvas");
var eye = [];
for(var i=0; i < eyeCanvases.length; i++) {
  var eyeData = new coreCanvas(eyeCanvases[i]);
  var newEye = new eyeObj(eyeData);
  eye.push(newEye);
}
runtimeData.NUM_EYES = eye.length;

function clearCanvases() { 
  for(var e = 0; e < runtimeData.NUM_EYES; e++) {
    eye[e].display.ctx.fillStyle = "black";
    eye[e].display.ctx.fillRect(0, 0, eye[e].display.canvas.width, eye[e].display.canvas.height);
  }
}

function drawEye(
 e,
 iScale,
 scleraX,
 scleraY,
 uT,
 lT,
 firmwareData
) {
  var screenX, screenY, scleraXsave;
  var irisX, irisY;
  var p, angle;
  var distance;
  scleraXsave = scleraX; 
  irisY       = scleraY - (firmwareData.SCLERA_HEIGHT - firmwareData.IRIS_HEIGHT) / 2;
  for(screenY = 0; screenY < firmwareData.SCREEN_HEIGHT; screenY++, scleraY++, irisY++) {
    scleraX = scleraXsave;
    irisX   = scleraXsave - (firmwareData.SCLERA_WIDTH - firmwareData.IRIS_WIDTH) / 2;
    for(screenX=0; screenX < firmwareData.SCREEN_WIDTH; screenX++, scleraX++, irisX++) {
      if((firmwareData.lower[screenX][screenY] <= lT) ||
         (firmwareData.upper[screenX][screenY] <= uT)) {
        p = 0;
      } else if((irisY < 0) || (irisY >= firmwareData.IRIS_HEIGHT) ||
                (irisX < 0) || (irisX >= firmwareData.IRIS_WIDTH)) {
        p = firmwareData.sclera[~~scleraX][~~scleraY];
      } else {
        var data = firmwareData.polar[~~irisX][~~irisY];
        distance = (iScale * (data & 0x7F)) / 128;
        if(distance < firmwareData.IRIS_MAP_HEIGHT) {
          angle = (firmwareData.IRIS_MAP_WIDTH * (data >> 7)) / 512;
          p = firmwareData.iris[~~angle][~~distance];
        } else {
          p = firmwareData.sclera[~~scleraX][~~scleraY]; 
        }
      }
      var outputPtr = ((screenY * eye[e].display.canvas.width) + screenX) * 4;
      var r = (p & 63488) >> 8;
      var g = (p & 2016) >> 3;
      var b = (p & 31) << 3;
      eye[e].display.imageDataData[outputPtr] = r;
      eye[e].display.imageDataData[outputPtr + 1] = g;
      eye[e].display.imageDataData[outputPtr + 2] = b;
      eye[e].display.imageDataData[outputPtr + 3] = 255;
    }
  }
  eye[e].display.ctx.putImageData(eye[e].display.imageData, 0, 0, 0, 0, firmwareData.SCLERA_WIDTH, firmwareData.SCLERA_HEIGHT)
}

var ease = [
  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  3,
  3,  3,  4,  4,  4,  5,  5,  6,  6,  7,  7,  8,  9,  9, 10, 10,
  11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23,
  24, 25, 26, 27, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58,
  60, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 76, 77, 78, 80,
  81, 83, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 98,100,101,103,
  104,106,107,109,110,112,113,115,116,118,119,121,122,124,125,127,
  128,130,131,133,134,136,137,139,140,142,143,145,146,148,149,151,
  152,154,155,157,158,159,161,162,164,165,167,168,170,171,172,174,
  175,177,178,179,181,182,183,185,186,188,189,190,192,193,194,195,
  197,198,199,201,202,203,204,205,207,208,209,210,211,213,214,215,
  216,217,218,219,220,221,222,224,225,226,227,228,228,229,230,231,
  232,233,234,235,236,237,237,238,239,240,240,241,242,243,243,244,
  245,245,246,246,247,248,248,249,249,250,250,251,251,251,252,252,
  252,253,253,253,254,254,254,254,254,255,255,255,255,255,255,255 ];

function randomInt(min,max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function map(x, in_min, in_max, out_min, out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

var frames   = 0;
var eyeIndex = 0;
var eyeInMotion = false;
var eyeOldX = 512;
var eyeOldY = 512;
var eyeNewX = 512;
var eyeNewY = 512;
var eyeMoveStartTime = 0;
var eyeMoveDuration  = 0;
var uThreshold = 128;
function frame(iScale) {
  var eyeX = 0;
  var eyeY = 0;
  var t = performance.now();
  if(++eyeIndex >= runtimeData.NUM_EYES) eyeIndex = 0;
  var d = 0;
  var dx = (eyeX * 2) - 1023;
  var dy = (eyeY * 2) - 1023;
  if((d = (dx * dx + dy * dy)) > (1023 * 1023)) {
    d    = Math.sqrt(d);
    eyeX = ((dx * 1023 / d) + 1023) / 2;
    eyeY = ((dy * 1023 / d) + 1023) / 2;
  }
  var dt = t - eyeMoveStartTime;
  if(eyeInMotion) {
    if(dt >= eyeMoveDuration) {
      eyeInMotion      = false;
      eyeMoveDuration  = ~~(Math.random() * 3000);
      eyeMoveStartTime = t
      eyeX = eyeOldX = eyeNewX;
      eyeY = eyeOldY = eyeNewY;
    } else {
      var e = ease[~~(255 * dt / eyeMoveDuration)] + 1;
      eyeX = eyeOldX + (((eyeNewX - eyeOldX) * e) / 256);
      eyeY = eyeOldY + (((eyeNewY - eyeOldY) * e) / 256);
    }
  } else {
    eyeX = eyeOldX;
    eyeY = eyeOldY;
    if(dt > eyeMoveDuration) {
      var dx = 0;
      var dy = 0;
      var d = 0;
      do {
        eyeNewX = ~~(Math.random() * 1024);
        eyeNewY = ~~(Math.random() * 1024);
        dx      = (eyeNewX * 2) - 1023;
        dy      = (eyeNewY * 2) - 1023;
      } while((d = (dx * dx + dy * dy)) > (1023 * 1023));
      eyeMoveDuration  = randomInt(72, 144);
      eyeMoveStartTime = t;
      eyeInMotion      = true;
    }
  }

  if(runtimeData.AUTOBLINK){
    if((t - runtimeData.timeOfLastBlink) >= runtimeData.timeToNextBlink) {
      runtimeData.timeOfLastBlink = t;
      var blinkDuration = randomInt(36, 72);
      for(var e = 0; e < runtimeData.NUM_EYES; e++) {
        if(eye[e].blink.state == runtimeData.NOBLINK) {
          eye[e].blink.state     = runtimeData.ENBLINK;
          eye[e].blink.startTime = t;
          eye[e].blink.duration  = blinkDuration;
        }
      }
      runtimeData.timeToNextBlink = blinkDuration * 3 + ~~(Math.random() * 4000);
    }
  }

  if(eye[eyeIndex].blink.state) {
    if((t - eye[eyeIndex].blink.startTime) >= eye[eyeIndex].blink.duration) {
      if(++eye[eyeIndex].blink.state > runtimeData.DEBLINK) {
        eye[eyeIndex].blink.state = runtimeData.NOBLINK;
      } else {
        eye[eyeIndex].blink.duration *= 2;
        eye[eyeIndex].blink.startTime = t;
      }
    }
  } 
  iScale = ((firmwareData.IRIS_MAP_HEIGHT + 1) * 1024) / (1024 - (iScale * (firmwareData.IRIS_MAP_HEIGHT - 1) / firmwareData.IRIS_MAP_HEIGHT));
  eyeX = map(eyeX, 0, 1023, 0, firmwareData.SCLERA_WIDTH  - 128);
  eyeY = map(eyeY, 0, 1023, 0, firmwareData.SCLERA_HEIGHT - 128);
  if(eyeIndex == 1){
    eyeX = (firmwareData.SCLERA_HEIGHT - 128) - eyeX;
  }
  eyeX += 4;
  if(eyeX > (firmwareData.SCLERA_WIDTH - 128)) eyeX = (firmwareData.SCLERA_WIDTH - 128);
  var lThreshold = 0;
  var n = 0;
  var sampleX = 0;
  var sampleY = 0;
  if(runtimeData.TRACKING){
    sampleX = ~~(firmwareData.SCLERA_WIDTH  / 2 - eyeX );
    sampleY = ~~(firmwareData.SCLERA_HEIGHT / 2 - (eyeY / 1.5 + firmwareData.IRIS_HEIGHT / 3.5));
    if(sampleX < 0) {
      n = 0;
    }else {
      n = (firmwareData.upper[sampleX][sampleY]);
    }
    uThreshold = (uThreshold * 3 + n) / 4;
    lThreshold = 254 - uThreshold;
  }else{
    uThreshold = lThreshold = 0;
  }

  if(eye[eyeIndex].blink.state) {
    var s = (t - eye[eyeIndex].blink.startTime);
    if(s >= eye[eyeIndex].blink.duration) s = 255;
    else s = 255 * s / eye[eyeIndex].blink.duration;
    s          = (eye[eyeIndex].blink.state == runtimeData.DEBLINK) ? 1 + s : 256 - s;
    n          = (uThreshold * s + 254 * (257 - s)) / 256;
    lThreshold = (lThreshold * s + 254 * (257 - s)) / 256;
  } else {
    n          = uThreshold;
  }
  drawEye(eyeIndex, iScale, eyeX, eyeY, n, lThreshold, firmwareData, sampleX, sampleY);
}

var oldIris = (runtimeData.IRIS_MIN + runtimeData.IRIS_MAX) / 2;
var newIris = randomInt(runtimeData.IRIS_MIN, runtimeData.IRIS_MAX);

var irisQueue = new Queue();
function split(
startValue,
 endValue,
 startTime,
 duration,
 range) {
  if(range >= 8) {
    range    /= 2;
    duration /= 2;
    var midValue = (startValue + endValue - range) / 2 + ~~(Math.random() * range);
    var midTime  = startTime + duration;
    split(startValue, midValue, startTime, duration, range);
    split(midValue  , endValue, midTime  , duration, range);
  } else {
    var dt = 0;
    var v = 0;
    dt = 25;
    v = startValue + (((endValue - startValue) * dt) / duration);
    if(v < runtimeData.IRIS_MIN)      v = runtimeData.IRIS_MIN;
    else if(v > runtimeData.IRIS_MAX) v = runtimeData.IRIS_MAX;
    irisQueue.enqueue(v);
  }
}

var irisValue = 0;
function loop() {
  if(irisQueue.isEmpty()){
    newIris = randomInt(runtimeData.IRIS_MIN, runtimeData.IRIS_MAX);
    split(oldIris, newIris, performance.now(), 10000, runtimeData.IRIS_MAX - runtimeData.IRIS_MIN);
    oldIris = newIris;  
  }else{
    frame(irisQueue.dequeue());
  }
  requestAnimationFrame(loop);
}

function Queue(){
  var queue  = [];
  var offset = 0;
  this.getLength = function(){
    return (queue.length - offset);
  }
  this.isEmpty = function(){
    return (queue.length == 0);
  }
  this.enqueue = function(item){
    queue.push(item);
  }
  this.dequeue = function(){
    if (queue.length == 0) return undefined;
    var item = queue[offset];
    if (++ offset * 2 >= queue.length){
      queue  = queue.slice(offset);
      offset = 0;
    }
    return item;
  }
  this.peek = function(){
    return (queue.length > 0 ? queue[offset] : undefined);
  }
}


</script>
</body></html>